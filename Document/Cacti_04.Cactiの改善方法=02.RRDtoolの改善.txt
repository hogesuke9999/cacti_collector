02.RRDtoolの改善
RRDtoolは標準では可用性の機能を持たないことは先に述べたが、それでは可用性を保つためには、どのような手法が考ええられるだろうか。 一つはRRDtoolのファイルをコピーする方法、もう一つはRRDtoolのファイルを共有ディスク上に保持すること、が挙げられる。
RRDtoolのファイルをコピーする場合、Cactiは定期的なポーリングを行い、その結果をRRDtoolのファイルに書き込みのだから、その更新のタイミングでRRDtoolのファイルをコピーコマンドなどでコピーすればいい。 コピーする方法は、リモートコピーができるrcpやscpで十分である。 もちろんrsyncでも問題ないが、RRDtoolは必ず書き換わり、更新されるのだから、更新の差分を確認するコストが無駄になる。そういった点では、ファイルが更新されたタイミングで更新するlsyncでもいいだろう。
次に、RRDtoolのファイルを共有ディスク上に保持する場合だが、共有ディスクと言ってもいくつかの選択肢がある。 一つは外部ストレージに対してNFSやiSCSIでマウントする方法、もう一つは特定のパーティションをネットワーク同期する方法である。
前者はブロック単位で書き換えを行うため、RRDtoolのようなファイルの一部だけが書き換わるような性質のものについては、ファイルコピーよりも性能がいいはずである。 また、マウントしてしまうと、ローカルディスクと同じように扱うことができる。 デメリットとしては、外部ディスクを用意しなければならないというコストがかかる点である。
後者は、DRBDなどの技術でサーバ間のディスク内容を同期させるものである。 外部ストレージと同じ感覚で使用することができ、さらに外部ストレージを別途用意しなくていいというコスト面でのメリットがある。 また、ネットワーク同期の方法でも、ブロック単位で書き換えを行うため、RRDtoolのようなファイルの一部だけが書き換わるような性質のものについては、ファイルコピーよりも性能がいいはずである。 その反面、同期状態が壊れた場合の復旧が困難である、というリスクがある。
結局、外部ディスクか、ネットワーク同期ディスクか、という選択は、費用を確保できるかどうかという点で決まってくる。 購入コストを出さない代わりに運用コストでカバーするか、ということである。
では、ファイルコピーをする場合と共有ディスク上のファイルを更新する場合で、どの程度性能差が生じるか、 実際に計測をすることにした。
結果として、ファイルコピーする場合は平均0.012秒、NFSマウント状のファイルを直接更新した場合は平均0.008秒かかった。 しかし、RRDtoolは保持するデータ間隔によって、更新処理が異なっている。例えば、5分ごとのタイミングでは、5分ごとのデータだけを追加すればいいのだが、30分データも保持するような設定になっていると、30分ごとにデータを追加する処理が増えてしまう。
Cactiの標準設定では、5分(300秒x1)、30分(300秒x6)、2時間(300秒x24)、1日(300秒x288)、のデータを保持するので、そのタイミングごとで負荷がかかることになる。 このような仕様のため、ファイルコピーの場合と共有ディスク上のファイルを更新する場合とで、性能差が逆転することもあるのである。
今回は仮想環境で計測したこともあり、データの精度が不十分であるといえるが、実際に設計する際には、実機での性能調査を行い、適切な方法を選択することとなるだろう。
